//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v7.0.1, CSLA Templates: v4.0.0.0, CSLA Framework: v4.3.x.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'BaseVouchGroupInfo.cs'.
//
//     Template: ReadOnlyRoot.DataAccess.ParameterizedSQL.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using MySql.Data.MySqlClient;

using Csla;
using Csla.Data;

namespace vjf.SyncTool.Business
{
    public partial class BaseVouchGroupInfo
    {
        private void DataPortal_Fetch(BaseVouchGroupCriteria criteria)
        {
            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return;

            string commandText = String.Format("SELECT id, title, city, begin_date, end_date, node_product, product, vouch_num, expday, new_user_cost, new_user, old_user_cost, old_user, per_vouch_num, status, created, created_uid, updated, updated_uid FROM base_vouch_group {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (var connection = new MySqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new MySqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if (reader.Read())
                            Map(reader);
                        else
                            throw new System.Exception(String.Format("The record was not found in '.base_vouch_group' using the following criteria: {0}.", criteria));
                    }
                }
            }

            OnFetched();
        }

        #region Map

        private void Map(SafeDataReader reader)
        {
            bool cancel = false;
            OnMapping(reader, ref cancel);
            if (cancel) return;

            LoadProperty(_identificationProperty, reader["id"]);
            LoadProperty(_titleProperty, reader["title"]);
            LoadProperty(_cityProperty, reader["city"]);
            LoadProperty(_beginDateProperty, reader["begin_date"]);
            LoadProperty(_endDateProperty, reader["end_date"]);
            LoadProperty(_nodeProductProperty, reader["node_product"]);
            LoadProperty(_productProperty, reader["product"]);
            LoadProperty(_vouchNumProperty, reader["vouch_num"]);
            LoadProperty(_expdayProperty, reader["expday"]);
            LoadProperty(_newUserCostProperty, reader["new_user_cost"]);
            LoadProperty(_newUserProperty, reader["new_user"]);
            LoadProperty(_oldUserCostProperty, reader["old_user_cost"]);
            LoadProperty(_oldUserProperty, reader["old_user"]);
            LoadProperty(_perVouchNumProperty, reader["per_vouch_num"]);
            LoadProperty(_statusProperty, reader["status"]);
            LoadProperty(_createdProperty, reader["created"]);
            LoadProperty(_createdUidProperty, reader["created_uid"]);
            LoadProperty(_updatedProperty, reader["updated"]);
            LoadProperty(_updatedUidProperty, reader["updated_uid"]);

            OnMapped();
        }

        private void Child_Fetch(SafeDataReader reader)
        {
            Map(reader);
        }

        #endregion
    }
}
