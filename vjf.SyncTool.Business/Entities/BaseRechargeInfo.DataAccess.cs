//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated using CodeSmith: v7.0.1, CSLA Templates: v4.0.0.0, CSLA Framework: v4.3.x.
//     Changes to this file will be lost after each regeneration.
//     To extend the functionality of this class, please modify the partial class 'BaseRechargeInfo.cs'.
//
//     Template: ReadOnlyRoot.DataAccess.ParameterizedSQL.cst
//     Template website: http://code.google.com/p/codesmith/
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using MySql.Data.MySqlClient;

using Csla;
using Csla.Data;

namespace vjf.SyncTool.Business
{
    public partial class BaseRechargeInfo
    {
        private void DataPortal_Fetch(BaseRechargeCriteria criteria)
        {
            bool cancel = false;
            OnFetching(criteria, ref cancel);
            if (cancel) return;

            string commandText = String.Format("SELECT id, orderid, phone, carno, province, city, pid, pnum, amount, fee, status, paytype, serialnum, activetime, expdate, cardno, protype, remark, created, createid, ispay, paytime, area FROM base_recharge {0}", ADOHelper.BuildWhereStatement(criteria.StateBag));
            using (var connection = new MySqlConnection(ADOHelper.ConnectionString))
            {
                connection.Open();
                using (var command = new MySqlCommand(commandText, connection))
                {
                    command.Parameters.AddRange(ADOHelper.SqlParameters(criteria.StateBag));
                    using(var reader = new SafeDataReader(command.ExecuteReader()))
                    {
                        if (reader.Read())
                            Map(reader);
                        else
                            throw new System.Exception(String.Format("The record was not found in '.base_recharge' using the following criteria: {0}.", criteria));
                    }
                }
            }

            OnFetched();
        }

        #region Map

        private void Map(SafeDataReader reader)
        {
            bool cancel = false;
            OnMapping(reader, ref cancel);
            if (cancel) return;

            LoadProperty(_identificationProperty, reader["id"]);
            LoadProperty(_orderidProperty, reader["orderid"]);
            LoadProperty(_phoneProperty, reader["phone"]);
            LoadProperty(_carnoProperty, reader["carno"]);
            LoadProperty(_provinceProperty, reader["province"]);
            LoadProperty(_cityProperty, reader["city"]);
            LoadProperty(_pidProperty, reader["pid"]);
            LoadProperty(_pnumProperty, reader["pnum"]);
            LoadProperty(_amountProperty, reader["amount"]);
            LoadProperty(_feeProperty, reader["fee"]);
            LoadProperty(_statusProperty, reader["status"]);
            LoadProperty(_paytypeProperty, reader["paytype"]);
            LoadProperty(_serialnumProperty, reader["serialnum"]);
            LoadProperty(_activetimeProperty, reader["activetime"]);
            LoadProperty(_expdateProperty, reader["expdate"]);
            LoadProperty(_cardnoProperty, reader["cardno"]);
            LoadProperty(_protypeProperty, reader["protype"]);
            LoadProperty(_remarkProperty, reader["remark"]);
            LoadProperty(_createdProperty, reader["created"]);
            LoadProperty(_createidProperty, reader["createid"]);
            LoadProperty(_ispayProperty, reader["ispay"]);
            LoadProperty(_paytimeProperty, reader["paytime"]);
            LoadProperty(_areaProperty, reader["area"]);

            OnMapped();
        }

        private void Child_Fetch(SafeDataReader reader)
        {
            Map(reader);
        }

        #endregion
    }
}
